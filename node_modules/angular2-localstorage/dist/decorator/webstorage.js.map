{"version":3,"file":"webstorage.js","sourceRoot":"","sources":["../../src/decorator/webstorage.ts"],"names":[],"mappings":";AAAA,oEAAgE;AAEhE,sBAA6B,GAAY;IACrC,MAAM,CAAC,kBAAU,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;AACzC,CAAC;AAFD,oCAEC;AAED,wBAA+B,GAAY;IACvC,MAAM,CAAC,kBAAU,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;AAC3C,CAAC;AAFD,wCAEC;AAGD,IAAI,KAAK,GAAG,EAAE,CAAC;AAEJ,QAAA,UAAU,GAAG,UAAC,UAAmB,EAAE,GAAW;IACrD,MAAM,CAAC,UAAC,MAAc,EAAE,YAAoB;QACxC,GAAG,GAAG,GAAG,IAAI,YAAY,CAAC;QAE1B,IAAI,UAAU,GAAG,sCAAiB,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAI,WAAW,GAAG,sCAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAEzD,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE;YACxC,GAAG,EAAE;gBACD,MAAM,CAAC,sCAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YAClD,CAAC;YACD,GAAG,EAAE,UAAS,KAAU;gBACpB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAEd,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,CAAC;wBAEvB,sCAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;oBAClD,CAAC;oBAED,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;oBAClB,MAAM,CAAC;gBACX,CAAC;gBAED,sCAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YAClD,CAAC;SACJ,CAAC,CAAC;IACP,CAAC,CAAA;AACL,CAAC,CAAA","sourcesContent":["import {WebStorageUtility} from \"../utility/webstorage.utiltiy\";\r\n\r\nexport function LocalStorage(key?: string) {\r\n    return WebStorage(localStorage, key);\r\n}\r\n\r\nexport function SessionStorage(key?: string) {\r\n    return WebStorage(sessionStorage, key);\r\n}\r\n\r\n// initialization cache\r\nlet cache = {};\r\n\r\nexport let WebStorage = (webStorage: Storage, key: string) => {\r\n    return (target: Object, propertyName: string): void => {\r\n        key = key || propertyName;\r\n\r\n        let storageKey = WebStorageUtility.generateStorageKey(key);\r\n        let storedValue = WebStorageUtility.get(webStorage, key);\r\n\r\n        Object.defineProperty(target, propertyName, {\r\n            get: function() {\n                return WebStorageUtility.get(webStorage, key);\r\n            },\r\n            set: function(value: any) {\r\n                if (!cache[key]) {\r\n                    // first setter handle\r\n                    if (storedValue === null) {\r\n                        // if no value in localStorage, set it to initializer\r\n                        WebStorageUtility.set(webStorage, key, value);\r\n                    }\r\n\r\n                    cache[key] = true;\r\n                    return;\r\n                }\r\n\r\n                WebStorageUtility.set(webStorage, key, value);\r\n            },\r\n        });\r\n    }\r\n}\r\n"]}